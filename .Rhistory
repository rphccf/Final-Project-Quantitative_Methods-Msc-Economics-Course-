## Comentei o grafico em 2D para decidirmos qual apresentar: 2D ou 3D
# plot(final1[,1], final1[,3],type="l",main="BVSP:Previ X Real",xlab="Dias",ylab="Indice",col="blue",lwd=1.5);
# lines(final1[,1], final[,2],col="red",lwd=1.5);
# lines(final1[,1],final1[,4],col="grey");
# lines(final1[,1],final1[,5],col="grey");
## Grafico de BVSP - Previsto versus Realizado
graph3d1= scatterplot3d(x = final1[,1], y = final1[,3],main="BVSP:Previsao X Real", angle = 65,
color="red", col.grid="lightblue", axis = TRUE, tick.marks = TRUE, xlab = "Dias", ylab = "Indice",
label.tick.marks = TRUE, grid = TRUE, pch = 10, scale.y=0.75, type = "l", lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,2], col = "blue", pch = 10, type = "l",lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,4], col="gray", type = "l", pch = 10,lwd=1);
graph3d1$points3d(x = final1[,1], y = final1[,5],col="gray", type = "l", pch = 10, lwd=1);
#valor final do BVSP projetado 1 dia a frente/ou no mesmo dia
print(final1[nrow(final1),"PrevBVSP"]);
##Criando tabela com as estatisticas
#coeficiente da variacao
CoefVariacao = sd(treino1$BVSP)/mean(treino1$BVSP);
media = mean(abs(residuals(nn1)));
estatisticas  = matrix(data = c(media, CoefVariacao, equadmed,eqm,eqm2, final1[nrow(final1),"PrevBVSP"]), nrow = 1, ncol = 6);
colnames(estatisticas) <- c ("Erro. Qd. Medio Treino", "CoefVariacao Treino", "Erro Qd. Medio Teste", "Max Erro Qd", "Min Erro Qd", "ProjBVSP" );
##Mudando diretorio para salvar a planilha do excel
setwd("../database");
##Criando uma planilha no excel com os resultas e estatisticas
write.xlsx(x = as.data.frame(final1) , file="final1.xlsx",sheetName = "Final",row.names = FALSE);
write.xlsx(x = as.data.frame(estatisticas) , file="final1.xlsx",sheetName = "Estatisticas", append = TRUE,row.names = FALSE);
library(xlsx);
source("../lib/MergeArrays.r");
source("../lib/NATreatment.r");
beginData = "2007-01-02";
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
BVSPl=Lag(d$BVSP,1)
DJIl=Lag(d$DJI,1)
d = cbind(d,BVSPl,DJIl)
colnames(d) = c( "Date","BVSP","DJI","NIK","SHAN","BVSP1","DJIl")
d=d[-1,-3]
summary(d)
treino =d[1:ceiling(nrow(d)*0.8),]
test = d[-(1:ceiling(nrow(d)*0.8)),]
treino1=treino[,2:ncol(treino)]
x_test = test[ ,3:ncol(treino)]
y_test= test[["BVSP"]]
tail(x_test)
set.seed(1234)
nn1 = nnet(BVSP~.,data=treino1,size=15,linout=TRUE, rang=0.1,decay=5e-2,maxit=2000)
summary(nn1)
plotnet(nn1);
olden(nn1);
plot(treino[,1], residuals(nn1),type="l",main="Residuo - treino",xlab="Dias",col="blue",lwd=1);
abline(h=2,col="red")
wts.in=nn1$wts
struct=nn1$n
prev = predict(nn1,x_test,type="raw",na.omit(x_test))
final = as.data.frame(cbind(as.Date(test$Date),prev,y_test));
colnames(final)= c("Date","PrevBVSP","RealBVSP");
final[["Date"]] = as.Date(final[["Date"]]);
any(is.na(final))
up = final[,2] + (var(final[,2])^(0.5)/2)
low=final[,2] - (var(final[,2])^(0.5)/2)
final1=cbind(final,up,low)
equadmed = mean(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
eqm = max(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
eqm2 = min(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
graph3d1= scatterplot3d(x = final1[,1], y = final1[,3],main="BVSP:Previsao X Real", angle = 65,
color="red", col.grid="lightblue", axis = TRUE, tick.marks = TRUE, xlab = "Dias", ylab = "Indice",
label.tick.marks = TRUE, grid = TRUE, pch = 10, scale.y=0.75, type = "l", lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,2], col = "blue", pch = 10, type = "l",lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,4], col="gray", type = "l", pch = 10,lwd=1);
graph3d1$points3d(x = final1[,1], y = final1[,5],col="gray", type = "l", pch = 10, lwd=1);
print(final1[nrow(final1),"PrevBVSP"]);
graph3d1= scatterplot3d(x = final1[,1], y = final1[,3],main="BVSP:Previsao X Real", angle = 65,
color="red", col.grid="lightblue", axis = TRUE, tick.marks = TRUE, xlab = "Dias", ylab = "Indice",
label.tick.marks = TRUE, grid = TRUE, pch = 10, scale.y=0.75, type = "l", lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,2], col = "blue", pch = 10, type = "l",lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,4], col="gray", type = "l", pch = 10,lwd=1);
graph3d1$points3d(x = final1[,1], y = final1[,5],col="gray", type = "l", pch = 10, lwd=1);
require(quantmod);
require(nnet);
require(caret);
require(e1071);
require(XLConnect);
require(dplyr);
require(NeuralNetTools);
require(xts);
require(nnet);
require(NeuralNetTools);
require(nnet);
require(scatterplot3d);
library(xlsx);
source("../lib/MergeArrays.r");
source("../lib/NATreatment.r");
beginData = "2007-01-02";
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
BVSPl=Lag(d$BVSP,1)
DJIl=Lag(d$DJI,1)
d = cbind(d,BVSPl,DJIl)
colnames(d) = c( "Date","BVSP","DJI","NIK","SHAN","BVSP1","DJIl")
d=d[-1,-3]
summary(d)
treino =d[1:ceiling(nrow(d)*0.8),]
test = d[-(1:ceiling(nrow(d)*0.8)),]
treino1=treino[,2:ncol(treino)]
x_test = test[ ,3:ncol(treino)]
y_test= test[["BVSP"]]
tail(x_test)
set.seed(1234)
nn1 = nnet(BVSP~.,data=treino1,size=15,linout=TRUE, rang=0.1,decay=5e-2,maxit=2000)
summary(nn1)
plotnet(nn1);
olden(nn1);
plot(treino[,1], residuals(nn1),type="l",main="Residuo - treino",xlab="Dias",col="blue",lwd=1);
abline(h=2,col="red")
wts.in=nn1$wts
struct=nn1$n
prev = predict(nn1,x_test,type="raw",na.omit(x_test))
final = as.data.frame(cbind(as.Date(test$Date),prev,y_test));
colnames(final)= c("Date","PrevBVSP","RealBVSP");
final[["Date"]] = as.Date(final[["Date"]]);
any(is.na(final))
up = final[,2] + (var(final[,2])^(0.5)/2)
low=final[,2] - (var(final[,2])^(0.5)/2)
final1=cbind(final,up,low)
equadmed = mean(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
eqm = max(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
eqm2 = min(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
graph3d1= scatterplot3d(x = final1[,1], y = final1[,3],main="BVSP:Previsao X Real", angle = 65,
color="red", col.grid="lightblue", axis = TRUE, tick.marks = TRUE, xlab = "Dias", ylab = "Indice",
label.tick.marks = TRUE, grid = TRUE, pch = 10, scale.y=0.75, type = "l", lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,2], col = "blue", pch = 10, type = "l",lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,4], col="gray", type = "l", pch = 10,lwd=1);
graph3d1$points3d(x = final1[,1], y = final1[,5],col="gray", type = "l", pch = 10, lwd=1);
View(final1)
up = final[,2] + (var(final[,2])^(0.5)/2)
low=final[,2] - (var(final[,2])^(0.5)/2)
final1=cbind(final,up,low)
require(quantmod);
require(quantmod);
require(nnet);
require(caret);
require(e1071);
require(XLConnect);
require(dplyr);
require(NeuralNetTools);
require(xts);
require(nnet);
require(NeuralNetTools);
require(nnet);
require(scatterplot3d);
library(xlsx);
source("../lib/MergeArrays.r");
source("../lib/NATreatment.r");
beginData = "2007-01-02";
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
BVSPl=Lag(d$BVSP,1)
DJIl=Lag(d$DJI,1)
d = cbind(d,BVSPl,DJIl)
colnames(d) = c( "Date","BVSP","DJI","NIK","SHAN","BVSP1","DJIl")
d=d[-1,-3]
summary(d)
treino =d[1:ceiling(nrow(d)*0.8),]
test = d[-(1:ceiling(nrow(d)*0.8)),]
treino1=treino[,2:ncol(treino)]
x_test = test[ ,3:ncol(treino)]
y_test= test[["BVSP"]]
tail(x_test)
set.seed(1234)
nn1 = nnet(BVSP~.,data=treino1,size=15,linout=TRUE, rang=0.1,decay=5e-2,maxit=2000)
summary(nn1)
plotnet(nn1);
olden(nn1);
plot(treino[,1], residuals(nn1),type="l",main="Residuo - treino",xlab="Dias",col="blue",lwd=1);
abline(h=2,col="red")
wts.in=nn1$wts
struct=nn1$n
prev = predict(nn1,x_test,type="raw",na.omit(x_test))
final = as.data.frame(cbind(as.Date(test$Date),prev,y_test));
colnames(final)= c("Date","PrevBVSP","RealBVSP");
final[["Date"]] = as.Date(final[["Date"]]);
any(is.na(final))
up = final[,2] + (var(final[,2])^(0.5)/2)
require(quantmod);
require(nnet);
require(caret);
require(e1071);
require(XLConnect);
require(dplyr);
require(NeuralNetTools);
require(xts);
require(nnet);
require(NeuralNetTools);
require(nnet);
require(scatterplot3d);
library(xlsx);
source("../lib/MergeArrays.r");
source("../lib/NATreatment.r");
beginData = "2007-01-02";
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
BVSPl=Lag(d$BVSP,1)
DJIl=Lag(d$DJI,1)
d = cbind(d,BVSPl,DJIl)
colnames(d) = c( "Date","BVSP","DJI","NIK","SHAN","BVSP1","DJIl")
d=d[-1,-3]
summary(d)
treino =d[1:ceiling(nrow(d)*0.8),]
test = d[-(1:ceiling(nrow(d)*0.8)),]
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
beginData = "2007-01-02";
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
BVSPl=Lag(d$BVSP,1)
DJIl=Lag(d$DJI,1)
d = cbind(d,BVSPl,DJIl)
colnames(d) = c( "Date","BVSP","DJI","NIK","SHAN","BVSP1","DJIl")
d=d[-1,-3]
summary(d)
treino =d[1:ceiling(nrow(d)*0.8),]
test = d[-(1:ceiling(nrow(d)*0.8)),]
treino1=treino[,2:ncol(treino)]
x_test = test[ ,3:ncol(treino)]
y_test= test[["BVSP"]]
tail(x_test)
set.seed(1234)
nn1 = nnet(BVSP~.,data=treino1,size=15,linout=TRUE, rang=0.1,decay=5e-2,maxit=2000)
summary(nn1)
plotnet(nn1);
olden(nn1);
plot(treino[,1], residuals(nn1),type="l",main="Residuo - treino",xlab="Dias",col="blue",lwd=1);
abline(h=2,col="red")
wts.in=nn1$wts
struct=nn1$n
prev = predict(nn1,x_test,type="raw",na.omit(x_test))
final = as.data.frame(cbind(as.Date(test$Date),prev,y_test));
colnames(final)= c("Date","PrevBVSP","RealBVSP");
final[["Date"]] = as.Date(final[["Date"]]);
any(is.na(final))
up = final[,2] + (var(final[,2])^(0.5)/2)
View(final)
up = final[,2] + (var(final[,2])^(0.5)/2)
low=final[,2] - (var(final[,2])^(0.5)/2)
up = final[,2] + (var(final[,2])^(0.5)/2);
rm(up)
rm(low)
final[,2]
View(final)
any(is.na(final));
d = cbind(d,BVSPl,DJIl)
d = cbind(d,BVSPl,DJIl)
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
BVSPl=Lag(d$BVSP,1)
DJIl=Lag(d$DJI,1)
View(d)
d = cbind(d,BVSPl,DJIl)
colnames(d) = c( "Date","BVSP","DJI","NIK","SHAN","BVSP1","DJIl")
d=d[-1,-3]
summary(d)
treino =d[1:ceiling(nrow(d)*0.8),]
test = d[-(1:ceiling(nrow(d)*0.8)),]
treino1=treino[,2:ncol(treino)]
x_test = test[ ,3:ncol(treino)]
y_test= test[["BVSP"]]
tail(x_test)
require(quantmod);
require(nnet);
require(caret);
require(e1071);
require(XLConnect);
require(dplyr);
require(NeuralNetTools);
require(xts);
require(nnet);
require(NeuralNetTools);
require(nnet);
require(scatterplot3d);
library(xlsx);
source("../lib/MergeArrays.r");
source("../lib/NATreatment.r");
## data de inicio
beginData = "2007-01-02";
#### TICKER DE CADA VARIAVEL CONFORME YAHOO FINANCE
## bolsas utilizadas no modelo:Bovespa, DowJonnes, Nikei, Shangai
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
### Obtendo dados dos respectivos fechamentos
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
BVSPl=Lag(d$BVSP,1)
DJIl=Lag(d$DJI,1)
d = cbind(d,BVSPl,DJIl)
colnames(d) = c( "Date","BVSP","DJI","NIK","SHAN","BVSP1","DJIl")
d=d[-1,-3]
summary(d)
treino =d[1:ceiling(nrow(d)*0.8),]
test = d[-(1:ceiling(nrow(d)*0.8)),]
treino1=treino[,2:ncol(treino)]
x_test = test[ ,3:ncol(treino)]
y_test= test[["BVSP"]]
tail(x_test)
source("../lib/MergeArrays.r");
source("../lib/NATreatment.r");
beginData = "2007-01-02";
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
d = bodyNA(d);
for(i in 2:(nrow(xtsObject)-1)){
## percorrendo as colunas do data frame tal qual uma matriz e substituindo cada ocorrencia de NaN
for(j in 1:ncol(xtsObject)){
if(is.na(xtsObject[i,j])!=FALSE)xtsObject[i,j]=xtsObject[i-1,j];
}
}
bodyNA = function(xtsObject){
## percorrendo as linhas ate a data atual -1
for(i in 2:(nrow(xtsObject)-1)){
## percorrendo as colunas do data frame tal qual uma matriz e substituindo cada ocorrencia de NaN
for(j in 1:ncol(xtsObject)){
if(is.na(xtsObject[i,j])!=FALSE)xtsObject[i,j]=xtsObject[i-1,j];
}
}
if(is.na(xtsObject[nrow(xtsObject),3])!=FALSE)xtsObject[nrow(xtsObject),3]=xtsObject[nrow(xtsObject)-1,3];
if(is.na(xtsObject[nrow(xtsObject),4])!=FALSE)xtsObject[nrow(xtsObject),4]=xtsObject[nrow(xtsObject)-1,4j];
if(is.na(xtsObject[nrow(xtsObject),5])!=FALSE)xtsObject[nrow(xtsObject),5]=xtsObject[nrow(xtsObject)-1,5];
return(xtsObject)
}
d=Agglutinate(BVSP,DJI,NIK,SHAN);
require(quantmod);
require(nnet);
require(caret);
require(e1071);
require(XLConnect);
require(dplyr);
require(NeuralNetTools);
require(xts);
require(nnet);
require(NeuralNetTools);
require(nnet);
require(scatterplot3d);
library(xlsx);
source("../lib/MergeArrays.r");
source("../lib/NATreatment.r");
beginData = "2007-01-02";
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
for(j in 1:ncol(d)){
if(is.na(d[i,j])!=FALSE)d[i,j]=d[i-1,j];
}
for(i in 2:(nrow(d)-1)){
## percorrendo as colunas do data frame tal qual uma matriz e substituindo cada ocorrencia de NaN
for(j in 1:ncol(d)){
if(is.na(d[i,j])!=FALSE)d[i,j]=d[i-1,j];
}
}
if(is.na(d[nrow(d),3])!=FALSE)d[nrow(d),3]=d[nrow(d)-1,3];
if(is.na(d[nrow(d),4])!=FALSE)d[nrow(d),4]=d[nrow(d)-1,4j];
if(is.na(d[nrow(d),4])!=FALSE)d[nrow(d),4]=d[nrow(d)-1,4];
if(is.na(d[nrow(d),5])!=FALSE)d[nrow(d),5]=d[nrow(d)-1,5];
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
require(quantmod);
require(nnet);
require(caret);
require(e1071);
require(XLConnect);
require(dplyr);
require(NeuralNetTools);
require(xts);
require(nnet);
require(NeuralNetTools);
require(nnet);
require(scatterplot3d);
library(xlsx);
source("../lib/MergeArrays.r");
source("../lib/NATreatment.r");
beginData = "2007-01-02";
getSymbols(c("^BVSP","^DJI","^N225","000001.SS"), from = beginData);
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
View(d)
if(is.na(d[nrow(d),3])!=FALSE)d[nrow(d),3]=d[nrow(d)-1,3];
if(is.na(d[nrow(d),4])!=FALSE)d[nrow(d),4]=d[nrow(d)-1,4];
if(is.na(d[nrow(d),5])!=FALSE)d[nrow(d),5]=d[nrow(d)-1,5];
source('~/R/Trabalho_Final/R/lib/NATreatment.r')
BVSP=BVSP$BVSP.Close;
DJI=DJI$DJI.Close;
NIK=N225$N225.Close;
SHAN=`000001.SS`;
SHAN =SHAN$`000001.SS.Close`;
d=Agglutinate(BVSP,DJI,NIK,SHAN);
d = firstLineNA(d);
d = bodyNA(d);
View(d)
BVSPl=Lag(d$BVSP,1)
DJIl=Lag(d$DJI,1)
d = cbind(d,BVSPl,DJIl)
colnames(d) = c( "Date","BVSP","DJI","NIK","SHAN","BVSP1","DJIl")
d=d[-1,-3]
summary(d)
treino =d[1:ceiling(nrow(d)*0.8),]
test = d[-(1:ceiling(nrow(d)*0.8)),]
treino1=treino[,2:ncol(treino)]
x_test = test[ ,3:ncol(treino)]
y_test= test[["BVSP"]]
tail(x_test)
set.seed(1234)
nn1 = nnet(BVSP~.,data=treino1,size=15,linout=TRUE, rang=0.1,decay=5e-2,maxit=2000)
summary(nn1)
plotnet(nn1);
olden(nn1);
plot(treino[,1], residuals(nn1),type="l",main="Residuo - treino",xlab="Dias",col="blue",lwd=1);
abline(h=2,col="red")
wts.in=nn1$wts
struct=nn1$n
prev = predict(nn1,x_test,type="raw",na.omit(x_test))
final = as.data.frame(cbind(as.Date(test$Date),prev,y_test));
colnames(final)= c("Date","PrevBVSP","RealBVSP");
final[["Date"]] = as.Date(final[["Date"]]);
any(is.na(final));
up = final[,2] + (var(final[,2])^(0.5)/2);
low=final[,2] - (var(final[,2])^(0.5)/2)
final1=cbind(final,up,low)
equadmed = mean(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
eqm = max(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
eqm2 = min(abs(final1[1:ncol(final1)-1,"PrevBVSP"]-final1[1:ncol(final1)-1,"RealBVSP"]))
graph3d1= scatterplot3d(x = final1[,1], y = final1[,3],main="BVSP:Previsao X Real", angle = 65,
color="red", col.grid="lightblue", axis = TRUE, tick.marks = TRUE, xlab = "Dias", ylab = "Indice",
label.tick.marks = TRUE, grid = TRUE, pch = 10, scale.y=0.75, type = "l", lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,2], col = "blue", pch = 10, type = "l",lwd=2);
graph3d1$points3d(x = final1[,1], y = final1[,4], col="gray", type = "l", pch = 10,lwd=1);
graph3d1$points3d(x = final1[,1], y = final1[,5],col="gray", type = "l", pch = 10, lwd=1);
print(final1[nrow(final1),"PrevBVSP"]);
CoefVariacao = sd(treino1$BVSP)/mean(treino1$BVSP);
media = mean(abs(residuals(nn1)));
estatisticas  = matrix(data = c(media, CoefVariacao, equadmed,eqm,eqm2, final1[nrow(final1),"PrevBVSP"]), nrow = 1, ncol = 6);
colnames(estatisticas) <- c ("Erro. Qd. Medio Treino", "CoefVariacao Treino", "Erro Qd. Medio Teste", "Max Erro Qd", "Min Erro Qd", "ProjBVSP" );
setwd("../database");
write.xlsx(x = as.data.frame(final1) , file="final1.xlsx",sheetName = "Final",row.names = FALSE);
write.xlsx(x = as.data.frame(estatisticas) , file="final1.xlsx",sheetName = "Estatisticas", append = TRUE,row.names = FALSE);
source('~/R/Trabalho_Final/R/scripts/forecast_Main.R', encoding = 'UTF-8')
source('~/R/Trabalho_Final/R/scripts/forecast_Main.R', encoding = 'UTF-8')
